# Generated by Django 4.2.25 on 2025-10-16 16:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WorkSpace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Unique name for the workspace (e.g., 'Desk-A1', 'Meeting Room 2')", max_length=100, unique=True)),
                ('location', models.CharField(help_text="Physical location or floor level (e.g., 'Ground Floor', 'First Floor East Wing')", max_length=255)),
                ('capacity', models.PositiveIntegerField(help_text='Maximum number of people this space can accommodate')),
                ('workspace_type', models.CharField(choices=[('desk', 'Hot Desk'), ('meeting', 'Meeting Room'), ('booth', 'Private Booth'), ('pod', 'Collaboration Pod')], default='desk', help_text='Type of workspace for filtering and categorisation', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the workspace')),
                ('svg_id', models.CharField(help_text="Unique ID matching the SVG element in the floor plan (e.g., 'desk-a1-svg')", max_length=50)),
                ('svg_shape', models.CharField(choices=[('rect', 'Rectangle')], help_text='Shape type for SVG rendering (e.g., rectangle)', max_length=20)),
                ('svg_x_coord', models.PositiveIntegerField(help_text='x-coordinate for the workspace location')),
                ('svg_y_coord', models.PositiveIntegerField(help_text='y-coordinate for the workspace location')),
                ('svg_width', models.PositiveIntegerField(help_text='Width of the workspace')),
                ('svg_height', models.PositiveIntegerField(help_text='Height of the workspace')),
                ('status', models.CharField(choices=[('available', 'Available'), ('maintenance', 'Under Maintenance'), ('unavailable', 'Unavailable')], default='available', help_text='Current status - controls whether workspace can be booked', max_length=20)),
                ('amenities', models.TextField(blank=True, help_text="Comma-separated list of amenities (e.g., 'WiFi, Monitor, Whiteboard')")),
                ('hourly_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Hourly rate for booking (Â£0.00 for free spaces)', max_digits=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Workspace',
                'verbose_name_plural': 'Workspaces',
                'ordering': ['workspace_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_date', models.DateField(help_text='Date of the booking')),
                ('start_time', models.TimeField(help_text='Start time of the booking')),
                ('end_time', models.TimeField(help_text='End time of the booking')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='confirmed', help_text='Current status of the booking', max_length=20)),
                ('purpose', models.CharField(blank=True, help_text='Purpose of the booking (optional)', max_length=200)),
                ('notes', models.TextField(blank=True, help_text='Additional notes or special requirements')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User who made the booking', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(help_text='Workspace being booked', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='booking.workspace')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
                'ordering': ['-booking_date', '-start_time'],
            },
        ),
        migrations.AddConstraint(
            model_name='booking',
            constraint=models.CheckConstraint(check=models.Q(('end_time__gt', models.F('start_time'))), name='end_time_after_start_time'),
        ),
    ]
